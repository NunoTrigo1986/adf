{
	"name": "dataflow1",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "Parquet1",
						"type": "DatasetReference"
					},
					"name": "newparquet"
				},
				{
					"dataset": {
						"referenceName": "Parquet2",
						"type": "DatasetReference"
					},
					"name": "existingparquet"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "Parquet3",
						"type": "DatasetReference"
					},
					"name": "sink1"
				}
			],
			"transformations": [
				{
					"name": "signaturenew",
					"description": "__index_level_0__, fingerprint'"
				},
				{
					"name": "signatureexisting",
					"description": "__index_level_0__, fingerprint'"
				},
				{
					"name": "exists1"
				}
			],
			"scriptLines": [
				"source(output(",
				"          Date as timestamp,",
				"          {USFOMC=ECIX} as double,",
				"          {SERATE=ECIX} as double,",
				"          {NOINTR=ECIX} as double,",
				"          {DKLENR=ECIX} as double,",
				"          {__index_level_0__} as long",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'parquet') ~> newparquet",
				"source(output(",
				"          Date as timestamp,",
				"          {USFOMC=ECIX} as double,",
				"          {SERATE=ECIX} as double,",
				"          {NOINTR=ECIX} as double,",
				"          {DKLENR=ECIX} as double,",
				"          {__index_level_0__} as long",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'parquet') ~> existingparquet",
				"newparquet derive(fingerprint = sha2(256,columns())) ~> signaturenew",
				"existingparquet derive(fingerprint = sha2(256,columns())) ~> signatureexisting",
				"signaturenew, signatureexisting exists(signaturenew@fingerprint == signatureexisting@fingerprint,",
				"     negate:true,",
				"     broadcast: 'auto')~> exists1",
				"exists1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'parquet',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> sink1"
			]
		}
	}
}